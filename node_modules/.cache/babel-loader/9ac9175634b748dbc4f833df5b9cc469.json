{"ast":null,"code":"var _jsxFileName = \"/home/dellvostro253/Desktop/redux/src/Components/postsList.js\";\nimport './style.css';\nimport React from 'react';\nimport service from '../Service/service';\nimport { store } from '../index';\nimport { getAllPosts } from '../Actions/postAction';\nexport class PostsList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false\n    };\n  }\n\n  async componentDidMount() {\n    /* if (this.state.posts.length === 0 && this.context.posts.length) {\n         this.setState({\n             posts: this.context.posts,\n             isLoaded: true\n         });\n     } else if(!this.context.posts.length){ \n         let posts = null;\n         posts = await axios.get(`https://jsonplaceholder.typicode.com/posts`)\n         \n     }*/\n    let posts = null;\n    posts = await service.getAllPosts();\n    this.props.getPosts(posts);\n    this.setState({\n      isLoaded: true\n    });\n    console.log(store.getState().data);\n  }\n\n  render() {\n    let {\n      isLoaded\n    } = this.state;\n\n    if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Loading..\");\n    } else {\n      return React.createElement(\"table\", {\n        className: \"posts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"PostID\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"UserID\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Description\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, this.props.posts.map(post => {\n        const {\n          id,\n          userId,\n          title\n        } = post;\n        return React.createElement(\"tr\", {\n          key: id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, id), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, userId), React.createElement(\"td\", {\n          className: \"post-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, title));\n      })));\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  posts: state.postsRequestResults.posts;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  getPosts: posts => {\n    dispatch(getAllPosts(posts));\n  }\n});","map":{"version":3,"sources":["/home/dellvostro253/Desktop/redux/src/Components/postsList.js"],"names":["React","service","store","getAllPosts","PostsList","Component","constructor","props","state","isLoaded","componentDidMount","posts","getPosts","setState","console","log","getState","data","render","map","post","id","userId","title","mapStateToProps","postsRequestResults","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAO,aAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAAQC,KAAR,QAAoB,UAApB;AACA,SAAQC,WAAR,QAA0B,uBAA1B;AAIA,OAAO,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AAE3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE;AADD,KAAb;AAGH;;AAEF,QAAMC,iBAAN,GAA0B;AACtB;;;;;;;;;;AAUC,QAAIC,KAAK,GAAG,IAAZ;AACAA,IAAAA,KAAK,GAAG,MAAMV,OAAO,CAACE,WAAR,EAAd;AACA,SAAKI,KAAL,CAAWK,QAAX,CAAoBD,KAApB;AACA,SAAKE,QAAL,CAAc;AAAEJ,MAAAA,QAAQ,EAAE;AAAZ,KAAd;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACc,QAAN,GAAiBC,IAA7B;AACH;;AAIGC,EAAAA,MAAM,GAAG;AACT,QAAI;AAAET,MAAAA;AAAF,QAAe,KAAKD,KAAxB;;AACA,QAAI,CAACC,QAAL,EAAe;AACX,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACH,KAFD,MAGK;AACD,aACA;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAHJ,CADJ,CADJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKF,KAAL,CAAWI,KAAX,CAAiBQ,GAAjB,CAAqBC,IAAI,IAAI;AAC1B,cAAM;AAAEC,UAAAA,EAAF;AAAMC,UAAAA,MAAN;AAAcC,UAAAA;AAAd,YAAwBH,IAA9B;AACA,eAAQ;AAAI,UAAA,GAAG,EAAEC,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,EAAL,CADI,EAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKC,MAAL,CAFI,EAGJ;AAAI,UAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA4BC,KAA5B,CAHI,CAAR;AAKH,OAPA,CADL,CARJ,CADA;AAqBH;AACJ;;AAzD0C;;AA6D/C,MAAMC,eAAe,GAAGhB,KAAK,IAAI;AAC7BG,EAAAA,KAAK,EAAEH,KAAK,CAACiB,mBAAN,CAA0Bd,KAA1B;AACV,CAFD;;AAIA,MAAMe,kBAAkB,GAAGC,QAAQ,KAC/B;AACGf,EAAAA,QAAQ,EAAGD,KAAD,IAAW;AACjBgB,IAAAA,QAAQ,CAACxB,WAAW,CAACQ,KAAD,CAAZ,CAAR;AACH;AAHJ,CAD+B,CAAnC","sourcesContent":["import './style.css';\nimport React from 'react';\nimport service from '../Service/service';\nimport {store} from '../index';\nimport {getAllPosts} from '../Actions/postAction'\n\n\n\nexport class PostsList extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false\n        };\n    }\n\n   async componentDidMount() {\n       /* if (this.state.posts.length === 0 && this.context.posts.length) {\n            this.setState({\n                posts: this.context.posts,\n                isLoaded: true\n            });\n        } else if(!this.context.posts.length){ \n            let posts = null;\n            posts = await axios.get(`https://jsonplaceholder.typicode.com/posts`)\n            \n        }*/\n        let posts = null;\n        posts = await service.getAllPosts();\n        this.props.getPosts(posts);\n        this.setState({ isLoaded: true});\n        console.log(store.getState().data);\n    }\n\n    \n  \n        render() {\n        let { isLoaded } = this.state;\n        if (!isLoaded) {\n            return <div>Loading..</div>;\n        }\n        else {\n            return(\n            <table className='posts'>\n                <thead>\n                    <tr>\n                        <th>PostID</th>\n                        <th>UserID</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.posts.map(post => {\n                        const { id, userId, title } = post;\n                        return (<tr key={id}>\n                            <td>{id}</td>\n                            <td>{userId}</td>\n                            <td className='post-title'>{title}</td>\n                        </tr>);\n                    })}\n                </tbody>\n            </table>);\n        \n        }\n    }\n    \n}\n\nconst mapStateToProps = state => {\n    posts: state.postsRequestResults.posts\n}\n\nconst mapDispatchToProps = dispatch => (\n    {\n       getPosts: (posts) => {\n           dispatch(getAllPosts(posts))\n       } \n    }\n)\n"]},"metadata":{},"sourceType":"module"}