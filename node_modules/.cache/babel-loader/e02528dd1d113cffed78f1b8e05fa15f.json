{"ast":null,"code":"var _jsxFileName = \"/home/dellvostro253/Desktop/redux/src/Components/postsList.js\";\nimport React from 'react';\nimport service from '../Service/service';\nimport { getAllPosts, getActivePost } from '../Actions/postAction';\nimport { connect } from \"react-redux\";\nimport { store } from '../index';\n\nclass PostsList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.replyClick = event => {\n      this.props.posts.filter();\n    };\n\n    this.state = {\n      isLoaded: false\n    };\n  }\n\n  async componentDidMount() {\n    let posts = await service.getAllPosts();\n    this.props.getPosts(posts);\n    this.setState({\n      isLoaded: true\n    });\n    console.log(store.getState());\n  }\n\n  render() {\n    let {\n      isLoaded\n    } = this.state;\n\n    if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"Loading..\");\n    } else {\n      return React.createElement(\"table\", {\n        className: \"posts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"PostID\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"UserID\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Description\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, this.props.posts.map(post => {\n        const {\n          id,\n          userId,\n          title\n        } = post;\n        return React.createElement(\"tr\", {\n          key: id,\n          onClick: (this.props.posts.filter(event => event.target.id), this.props.getActivePost(), e => {\n            this.props.history.push(`/post-info/${id}/${userId}`);\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, id), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, userId), React.createElement(\"td\", {\n          className: \"post-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, title));\n      })));\n    }\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  posts: state.postsRequestResults.posts\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getPosts: posts => {\n    dispatch(getAllPosts(posts));\n  },\n  getPost: activePost => {\n    dispatch(getActivePost(activePost));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsList);","map":{"version":3,"sources":["/home/dellvostro253/Desktop/redux/src/Components/postsList.js"],"names":["React","service","getAllPosts","getActivePost","connect","store","PostsList","Component","constructor","props","replyClick","event","posts","filter","state","isLoaded","componentDidMount","getPosts","setState","console","log","getState","render","map","post","id","userId","title","target","e","history","push","mapStateToProps","postsRequestResults","mapDispatchToProps","dispatch","getPost","activePost"],"mappings":"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","sourcesContent":["import React from 'react';\nimport service from '../Service/service';\nimport { getAllPosts, getActivePost } from '../Actions/postAction';\nimport { connect } from \"react-redux\";\nimport {store} from '../index'\n\n\n\nclass PostsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false\n        };\n    }\n    \n    replyClick = (event) => {\n        this.props.posts.filter()\n    }\n    \n    async componentDidMount() {\n        let posts = await service.getAllPosts();\n        this.props.getPosts(posts);\n        this.setState({ isLoaded: true });\n        console.log(store.getState())\n    }\n\n    render() {\n        let { isLoaded } = this.state;\n        if (!isLoaded) {\n            return <div>Loading..</div>;\n        }\n        else {\n            return (<table className='posts'>\n                <thead>\n                    <tr>\n                        <th>PostID</th>\n                        <th>UserID</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.posts.map(post => {\n                        const { id, userId, title } = post;\n                        return (<tr key={id} onClick={this.props.posts.filter(event => event.target.id),this.props.getActivePost(),e => { this.props.history.push(`/post-info/${id}/${userId}`)}}>\n                            <td>{id}</td>\n                            <td>{userId}</td>\n                            <td className='post-title'>{title}</td>\n                        </tr>);\n                    })}\n                </tbody>\n            </table>);\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    posts: state.postsRequestResults.posts\n});\nconst mapDispatchToProps = dispatch => ({\n    getPosts: (posts) => {\n        dispatch(getAllPosts(posts));\n    },\n    getPost: (activePost) => {\n        dispatch(getActivePost(activePost))\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsList);\n"]},"metadata":{},"sourceType":"module"}